{"version":3,"sources":["enum/todoStatus.ts","components/Header.tsx","enum/tableHeader.ts","components/todoComponents/LoaderComponent.tsx","services/updateData.ts","constants/common.ts","selectors/todoData.ts","components/todoComponents/TodoListItem.tsx","components/todoComponents/index.tsx","components/Home.tsx","serviceWorker.js","index.js"],"names":["Status","Header","className","LoaderComponent","doc","GoogleSpreadsheet","initializeConnection","a","useServiceAccountAuth","client_email","private_key","console","error","addToSheet","row","loadInfo","sheet","sheetsById","addRow","ROW_ID","id","TODO","todo","STATUS","status","log","getSheet","getRows","result","updateTodoStatus","rowId","limit","offset","save","todoData","isLoading","data","NOT_COMPLETED","getAllData","length","todos","map","value","TodoListItem","props","handleStatusChange","handleUserSubmit","React","useState","isInputShown","showInput","idx","style","textDecoration","COMPLETED","key","type","checked","onChange","htmlFor","placeholder","onKeyDown","event","keyCode","onClick","width","height","d","fill","fillRule","TodoMain","todoDatas","addTodos","useEffect","inputContext","document","getElementById","createdTodo","storeTodos","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fb9837d8.chunk.js","sourcesContent":["enum Status {\r\n\tCOMPLETED = 1,\r\n\tNOT_COMPLETED = 0\r\n}\r\n\r\nexport default Status;","import React from 'react';\r\n\r\nconst Header = () => (\r\n\t<header>\r\n\t\t<div className=\"header container\">\r\n\t\t\t<div className=\"col-left flex-wrapper\">\r\n\t\t\t\t{/* TODO: Create a side navigation bar menu */}\r\n\t\t\t\t{false && <div className=\"header__icons\">\r\n\t\t\t\t\t<svg className=\"icon-menu\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n\t\t\t\t\t\t<path \r\n\t\t\t\t\t\t\tfill=\"currentColor\" \r\n\t\t\t\t\t\t\tfillRule=\"evenodd\" \r\n\t\t\t\t\t\t\td=\"M4.5 5h15a.5.5 0 1 1 0 1h-15a.5.5 0 0 1 0-1zm0 6h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 6h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1z\" \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t</div>}\r\n\t\t\t\t<div className=\"header__main-header\">\r\n\t\t\t\t\tToDo\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-mid\" />\r\n\t\t\t<div className=\"col-right\" />\r\n\t\t</div>\r\n\t</header>\r\n);\r\n\r\nexport default Header;\r\n","enum Header {\r\n\tROW_ID = 'rowId',\r\n\tTODO = 'todo',\r\n\tSTATUS = 'status'\r\n}\r\n\r\nexport default Header;","import React from 'react';\n// import Spinner from '../common/Spinner';\n\nconst LoaderComponent = () => (\n  <div className=\"empty-section\">\n    {/* TODO: Implement loader screen */}\n    {/* <Spinner /> */}\n    <div className=\"text--secondary\">\n      Loading\n    </div>\n  </div>\n);\n\nexport default LoaderComponent;","import Header from '../enum/tableHeader';\r\nimport { Todos } from '../types/todoData';\r\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\r\nimport { SPREADSHEET_ID,SHEET_ID , CLIENT_EMAIL, PRIVATE_KEY } from \"../constants/common\";\r\n\r\nconst doc = new GoogleSpreadsheet(SPREADSHEET_ID);\r\n\r\nconst initializeConnection = async () => {\r\n\ttry {\r\n\t\tawait doc.useServiceAccountAuth({\r\n\t\t\tclient_email: CLIENT_EMAIL,\r\n\t\t\tprivate_key: PRIVATE_KEY,\r\n\t\t});\r\n\t} catch (e) {\r\n\t\tconsole.error('Error: ', e);\t\r\n\t}\r\n}\r\n\r\nexport const addToSheet = async (row: Todos) => {\r\n\ttry {\r\n\t\tawait initializeConnection();\t\r\n\t\tawait doc.loadInfo();\r\n\t\tconst sheet = doc.sheetsById[SHEET_ID];\r\n\t\tawait sheet.addRow({\r\n\t\t\t[Header.ROW_ID]: row.id, \r\n\t\t\t[Header.TODO]: row.todo, \r\n\t\t\t[Header.STATUS]: row.status\r\n\t\t});\r\n\t} catch(err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport const getSheet = async () => {\t\r\n\ttry {\r\n\t\tawait initializeConnection();\r\n\t\tawait doc.loadInfo();\r\n\t\tconst sheet = doc.sheetsById[SHEET_ID];\r\n\t\tconst result = await sheet.getRows()\r\n\r\n\t\treturn result;\r\n\t} catch(err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\n// updating data\r\n\r\nexport const updateTodoStatus = async (rowId: number, status: number) => {\r\n\ttry {\r\n\t\tawait initializeConnection();\r\n\t\tawait doc.loadInfo();\r\n\t\tconst sheet = doc.sheetsById[SHEET_ID];\r\n\t\tconst result = await sheet.getRows({limit: 1, offset: rowId - 1});\r\n\t\tresult[0].status = status;\r\n\t\tawait result[0].save();\r\n\r\n\t\treturn true;\r\n\t} catch(err) {\r\n\t\tconsole.log(err);\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n}\r\n","// TODO: Move all of this to a environment variable\r\n\r\nexport const SPREADSHEET_ID = '1Bf49j8h0IgTUjkaN_jJBU4kXlinn0bzXyx87sUK-98c';\r\nexport const SHEET_ID = '0';\r\nexport const CLIENT_EMAIL = 'demoapp@dummyproject-283014.iam.gserviceaccount.com';\r\nexport const PRIVATE_KEY = '-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCeSyMeurwRnX/c\\nP2R6+JzReNs0tLVwjPfH5/6kDaqPsFylO/YBw0q/5/rQcvHbu93sgJNFjxG28SBe\\n8x6wsQDsjGcKwTf63GvTpFSn6lPliWwIttVv32EYGwqpkL5nZmQiLbGKPBN0JLPr\\nLU6N4gmcoPR+AbO8kLOsMSL5x6AIYBEFZ5Gf9mWyEErW8XfMV/KLMdD/KgIXGwNQ\\n/PsZir09fRk7xJV72XJfl+bpDy/tvbSs8t49Bhhm8P2Nv8CxqFXV5rc5b/ookJMI\\n1sLcYI+Yv9QVCbiSfTSUaY8dStKVboDlm+l0BAY6aF//roiXu+5KeXkJu46AsR5U\\n5MmTMXAjAgMBAAECggEAB4pox+P5ZZVtK97ROJJzVf894grhwdTVUO6aUNJd1659\\nG1n55CebffzdE+UF5IPUlJmjamLgYyildCB8y8oC00H0/qwpsIejk1d2uPEOwhaD\\n0P50uHmZtH5FScKdb2uPRZmLpZwrCRNehsuHvHaSIqYAP6hxGYCDLqbAlcmOtBdc\\nNyESdwpFmZeU1ui0UuketzxOJmwAd4ye6HIjqre7Z53ft7tCedE5wxyADHTuw4X5\\nNzO9bzoiSAEB0HLWtPC0HUgu+Y8Lrm4Re8G7wn3hqAOeoupXixRmfEMeCGOB0Blr\\n2tPwEZ9AHTCv2AhodpMbVUb7X+dW5alQ6gwJtBVZUQKBgQDb5PXwtAvSSbIA7/Ei\\n6HQoDjmTaWtxf0DXLbgCNQ4MAjgKyrOA8RmwmPvDQdRXdnvwHyIwmRvutsnxsi98\\nqC84Motj0LlrqGjW+2/MIPXWiZxeOcfnKRSSIPr8GPuq/hFjKnhP5vKnXkSPOlAu\\nWF/NU6IZ1XRQuhk9LHl9B4sQbQKBgQC4SNh8/zUkZH/fbYQ/miL16xedTMDJs3qG\\nP7gW1XLXqQsOT136YMpJib7Pxacl1dKuUWK/b8yFBftGHxOybOdmSkgd942enYgC\\nF/ZWUvrdT6Yc7Q13GLoDUa5YWKRAtxP6H4XCwCB63grNmJOcbACgMdrDK4cieFlZ\\na5R7mlLIzwKBgCGLxnFYJk2IbJ1z/WeD6uSJdwMkG/4Omce5885yZZgzZnVPAx9y\\nqKamUBIzor9NFg9F0KN1WCuMuzYiJthvl/SM0XMCzqa75HKXnTCY/qgiCjbdvb9o\\nJvk8Cs4WyZ4GcISeYAhghTg/S1pGXSEU3limn54tUDdYjK0mcco/MlnpAoGAeQ+5\\n0FujYJX4/yEl6NZsMxtOtxJN7/NNAVZoq+9q80vkrHDtLudY3Hh19m5FAPD353Yl\\npddfBuBIEuele+hZF3Si7bTLvzCDwcRWGp2Gmc6SNJxx5RREVpvZKcaJmM3sfLsq\\nlya5751ggXHDPtYgjxxRNzeoHbfsEnc+4vgdfDcCgYAM83PgSrF9dQorw/fan1vS\\n0ZqMR6bl/LFDk7gsXKYwLy7yg0mo0e1U/Fh0rYkcPC1/k694dUYnl3Y6chPwhKYI\\nUxDWeZugfnYJvA0eN4l4FqM7mRYUoUwI+Xbw85j6l0KSgZ+Y0JeEE8+fysBvbdVO\\nLOL8b4yR0y69M75ZFvRxDw==\\n-----END PRIVATE KEY-----\\n';\r\n","import Status from '../enum/todoStatus';\r\nimport TodoData from '../types/todoData';\r\nimport { getSheet } from '../services/updateData';\r\n\r\n\r\nexport let todoData: TodoData = {\r\n\tisLoading: false,\r\n\tdata: [{\r\n\t\tid: 0,\r\n\t\ttodo: \"\",\r\n\t\tstatus: Status.NOT_COMPLETED\r\n\t}]\r\n}\r\n\r\n// get all data from the sheets\r\nexport const getAllData = async () => {\r\n\t// todoData = {...todoData, isLoading: true}\r\n\tconst data = await getSheet(); \r\n\t\r\n\tif(!data || !data.length) {\r\n\t\treturn {...todoData, isLoading: false};\r\n\t}\r\n\r\n\tconst todos = data.map(value => (\r\n\t\t{\r\n\t\t\tid: value.rowId,\r\n\t\t\ttodo: value.todo,\r\n\t\t\tstatus: value.status\r\n\t\t}\r\n\t));\r\n\t\r\n\treturn {...todoData, data: todos, isLoading: false}\r\n}\r\n\r\n","import React from 'react';\nimport Status from '../../enum/todoStatus';\nimport TodoData, {Todos} from \"../../types/todoData\";\ninterface TodoListItemProps {\n  todoData: TodoData\n  handleStatusChange: (value: Todos ) => void;\n  handleUserSubmit: () => void;\n}\n\nconst TodoListItem = (props: TodoListItemProps) => {\n  const {todoData, handleStatusChange, handleUserSubmit} = props;\n  const [isInputShown, showInput] = React.useState<boolean>(false);\n  const ENTER_BTN_KEY_CODE = 13;\n  \n  return (\n  <>\n  <ul className=\"list\">\n    {todoData.data.map((value, idx) => {\n     \n      return(\n      !!value.todo && (\n        <li\n          className=\"list__item list__item--bordered\"\n          style={{\n            textDecoration:\n            // TODO: Change this workaround\n              (value.status*1 === Status.COMPLETED\n                ? \"line-through\"\n                : \"none\")\n          }}\n          key={`todo-${idx}`}\n        >\n          <input\n            type=\"checkbox\"\n            id={`checklist-${value.id}`}\n            checked={value.status*1 === Status.COMPLETED}\n            onChange={() => handleStatusChange(value)}\n          />\n          <label htmlFor={`checklist-${value.id}`} className=\"checkbox\">\n            <div className=\"icon-tick\"/>\n          </label>\n          <div className=\"list__content\">\n          {value.todo}\n          </div>\n        </li>\n      ))})\n    }\n    {isInputShown && (\n      <li className=\"list__item list__item--bordered\">\n        <input\n          type=\"text\"\n          id=\"todo-input\"\n          placeholder=\"Enter your task here (Press 'enter' when you're done)\"\n          className=\"input-lg\"\n          onKeyDown={(event) => {\n            if (event.keyCode === ENTER_BTN_KEY_CODE) {\n              showInput(false);\n\n              return handleUserSubmit();\n            }\n          }}\n        />\n        {/*  TODO: Add options to edit and add todo from adjacent buttons */}\n        {false && <button\n          className=\"btn btn--transparent\"\n          onClick={handleUserSubmit}\n        >\n          <svg className=\"icon icon-plus\" width=\"13\" height=\"13\">\n            <path\n              d=\"M6 6V.5a.5.5 0 0 1 1 0V6h5.5a.5.5 0 1 1 0 1H7v5.5a.5.5 0 1 1-1 0V7H.5a.5.5 0 0 1 0-1H6z\"\n              fill=\"currentColor\"\n              fillRule=\"evenodd\"\n            />\n          </svg>\n        </button>}\n      </li>\n    )}\n  </ul>\n  <button\n    className=\"btn btn--transparent btn--with-icon\"\n    onClick={() => showInput(true)}\n  >\n    <div className=\"indicator\">\n      <svg className=\"icon icon-plus\" width=\"13\" height=\"13\">\n        <path\n          d=\"M6 6V.5a.5.5 0 0 1 1 0V6h5.5a.5.5 0 1 1 0 1H7v5.5a.5.5 0 1 1-1 0V7H.5a.5.5 0 0 1 0-1H6z\"\n          fill=\"currentColor\"\n          fillRule=\"evenodd\"\n        />\n      </svg>\n    </div>\n    <span>Add task</span>\n  </button>\n  </>\n);\n}\n\nexport default TodoListItem;","import React from \"react\";\r\n\r\nimport Status from \"../../enum/todoStatus\";\r\nimport LoaderComponent from \"./LoaderComponent\";\r\nimport TodoData, { Todos } from \"../../types/todoData\";\r\nimport { todoData, getAllData } from \"../../selectors/todoData\";\r\nimport { addToSheet, updateTodoStatus } from \"../../services/updateData\";\r\nimport TodoListItem from \"./TodoListItem\";\r\n\r\nconst TodoMain = () => {\r\n  // const ENTER_BTN_KEY_CODE = 13;\r\n  // TODO: Rename this local state name\r\n  const [todoDatas, addTodos] = React.useState<TodoData | null>(null);\r\n  // const [isInputShown, showInput] = React.useState<boolean>(false);\r\n\r\n  const storeTodos = () => {\r\n    const inputContext: any = document.getElementById(\"todo-input\") || \"\";\r\n    \r\n    if (!inputContext || !todoDatas) {\r\n      return;\r\n    }\r\n    \r\n    const todoId: number = todoDatas.data[todoDatas.data.length - 1].id*1 + 1;\r\n    const createdTodo: Todos = {\r\n      id: todoId,\r\n      todo: inputContext.value || \"\",\r\n      status: Status.NOT_COMPLETED,\r\n    };\r\n\r\n    addTodos({ ...todoDatas, data: [...todoDatas.data, createdTodo] });\r\n    inputContext.value = \"\";\r\n    addToSheet(createdTodo);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    (async () => {\r\n      addTodos({ ...todoData, isLoading: true });\r\n      const result = await getAllData();\r\n\r\n      addTodos(result);\r\n    })();\r\n  }, []);\r\n\r\n\r\n  const handleUserSubmit = () => {\r\n    storeTodos();\r\n  };\r\n\r\n  // TODO: Change implementation logic\r\n  const handleStatusChange = async (value: Todos) => {  \r\n     if(!todoDatas) {\r\n        return;\r\n      }\r\n    \r\n    value.status = value.status*1 === Status.COMPLETED\r\n    ? Status.NOT_COMPLETED\r\n    : Status.COMPLETED;\r\n    \r\n    addTodos({ ...todoDatas });\r\n\r\n    const result = await updateTodoStatus(value.id, value.status);\r\n    \r\n    // Reverting state if update fails\r\n    if(!result) {\r\n      value.status = value.status*1 === Status.COMPLETED\r\n      ? Status.NOT_COMPLETED\r\n      : Status.COMPLETED;\r\n      addTodos({ ...todoDatas });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title title--lg\">\r\n        <div className=\"title__text\">Today</div>\r\n      </div>\r\n      {todoDatas?.isLoading || !todoDatas ? (\r\n        <LoaderComponent />\r\n      ) : (\r\n        <>\r\n        {\r\n          todoDatas && ( <TodoListItem todoData={todoDatas} handleStatusChange={handleStatusChange} handleUserSubmit={handleUserSubmit} />)\r\n        }\r\n    </>\r\n    )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoMain;\r\n","import React from \"react\";\r\n\r\nimport Header from \"./Header\";\r\nimport TodoMain from \"./todoComponents\";\r\n\r\n\r\nconst Home = () => {  \r\n \r\n  return (\r\n  <>\r\n    <Header />\r\n    <main className=\"main-content\">\r\n      <div className=\"container\">\r\n        <div className=\"col-left\" />\r\n        <div className=\"col-mid\">\r\n          <TodoMain />\r\n        </div>\r\n        <div className=\"col-right\" />\r\n      </div>\r\n    </main>\r\n  </>\r\n)}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Home from './components/Home';\r\n\r\nimport './assets/scss/style.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Home />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}